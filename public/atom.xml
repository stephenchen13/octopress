<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[new code flow]]></title>
  <link href="http://newcodeflow.com/atom.xml" rel="self"/>
  <link href="http://newcodeflow.com/"/>
  <updated>2012-12-11T14:52:42-05:00</updated>
  <id>http://newcodeflow.com/</id>
  <author>
    <name><![CDATA[Stephen Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Everyday Rails Testing With Rspec]]></title>
    <link href="http://newcodeflow.com/blog/2012/12/11/everyday-rails-testing-with-rspec/"/>
    <updated>2012-12-11T14:44:00-05:00</updated>
    <id>http://newcodeflow.com/blog/2012/12/11/everyday-rails-testing-with-rspec</id>
    <content type="html"><![CDATA[<p>I highly recommend reading this ebook published by Aaron Sumner: <a href="https://leanpub.com/everydayrailsrspec">Everyday Rails Testing With Rspec</a> if you&#8217;re trying to break into the world of TDD. I&#8217;ve made it through half the book and here are my thoughts so far: the code is clear, the concepts are easy to follow and Aaron provides great insight into the decisions he has made while practicing TDD (i.e. he removes view specs because they are hard to maintain, and he uses integration tests to test things UI-related).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The difference between rake db:create and rake db:create:all]]></title>
    <link href="http://newcodeflow.com/blog/2012/12/10/the-difference-between-rake-db-create-and-rake-db-create-all/"/>
    <updated>2012-12-10T14:40:00-05:00</updated>
    <id>http://newcodeflow.com/blog/2012/12/10/the-difference-between-rake-db-create-and-rake-db-create-all</id>
    <content type="html"><![CDATA[<p><code>rake db:create</code></p>

<p>This command creates the database corresponding to your current environment.</p>

<p><code>rake db:create:all</code></p>

<p>This command creates all databases defined in <code>config/database.yml</code>. So when you run this command in development for the first time, it will create  production and test databases as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gboom: gists from the command line]]></title>
    <link href="http://newcodeflow.com/blog/2012/11/20/gboom-gists-from-the-command-line/"/>
    <updated>2012-11-20T17:30:00-05:00</updated>
    <id>http://newcodeflow.com/blog/2012/11/20/gboom-gists-from-the-command-line</id>
    <content type="html"><![CDATA[<p>Created my first gem today! And I&#8217;m wayyyy too proud of myself right now.</p>

<p>GBOOM is a gem that let&#8217;s you create gists from your command line. The most useful (read: only) feature that I implemented is that you can pass in specific lines from a file that you want to create a gist from.</p>

<p>I&#8217;ll write a post in the future about setting up a command line app with GLI and creating a gem but before now just check this shit out!</p>

<p><a href="https://github.com/stephenchen13/gboom">GBOOM!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Query NYC Open Datasets with Socrata]]></title>
    <link href="http://newcodeflow.com/blog/2012/11/14/how-to-query-nyc-open-datasets-with-socrata/"/>
    <updated>2012-11-14T21:19:00-05:00</updated>
    <id>http://newcodeflow.com/blog/2012/11/14/how-to-query-nyc-open-datasets-with-socrata</id>
    <content type="html"><![CDATA[<p>NYC provides a ton of data from a variety of sources to the public to use for research and for application development. There&#8217;s information ranging from Wifi Hotspot Locations to 311 Service requests. You can check out all the datasets here: <a href="https://nycopendata.socrata.com/">https://nycopendata.socrata.com/</a>. As a developer, working with these datasets can be tricky, as the documentation can be unclear and disorganized. Here&#8217;s a basic primer on how to get started.</p>

<h3>Access the dataset via SODA (Socrata Open Data API)</h3>

<p>Most of the datasets have a SODA API endpoint set up that you can hit to get data back. To find the endpoint, open up the dataset, click on the &#8220;Export&#8221; tab at the top to show the &#8220;API&#8221; tab.</p>

<p><img src="http://newcodeflow.com/images/endpoint.jpg"></p>

<p>The endpoint url will look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://data.cityofnewyork.us/api/views/erm2-nwe9/rows.json</span></code></pre></td></tr></table></div></figure>


<p>Each dataset has a unique identifier which will be important later on, in this instance it&#8217;s <code>erm2-nwe9</code>.</p>

<p>You can use your browser to hit this url and see what kind of data you get back, however depending on how large the dataset is this could take a very long time, even for a patient person. The json that&#8217;s returned in this case is unfortunately not very easy to work with, there&#8217;s hashes of data describing the table/columns in the beginning and then all the actual data in an array at the end of the response.
<img src="http://newcodeflow.com/images/json_data.jpg"></p>

<p>I really don&#8217;t care about anything other the actual data, so how do I get that back?</p>

<h3>Access the dataset through the right endpoint</h3>

<p>It turns out that SODA typically exposes two different endpoints, one under &#8220;/api/views&#8221; and another under &#8220;/resources&#8221;. The first endpoint is used as a RESTful interface while the other is primarily used to retrieve data. So for the example above these are the two endpoints, and the one we are interested in is the second. If you have the unique id of your dataset, you should be able to substitute it below and begin querying the data you want.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://data.cityofnewyork.us/api/views/erm2-nwe9/rows.json
</span><span class='line'>http://data.cityofnewyork.us/resource/erm2-nwe9.json</span></code></pre></td></tr></table></div></figure>


<h3>Filter the data</h3>

<p>No matter what you&#8217;re trying to do, you probably want to filter the data in some way. You can read the entirety of the query documentation here: http://dev.socrata.com/docs/queries, but the most important one you&#8217;ll probably be using to start is <code>$limit</code>, which limits the amount of data you get back so the web response will be super fast.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://data.cityofnewyork.us/resource/erm2-nwe9.json?$limit=10</span></code></pre></td></tr></table></div></figure>


<p>Here is a more advanced query that involves filtering by a datetime field. Note that you have to wrap the datetime value in single quotes for this to work.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://data.cityofnewyork.us/resource/erm2-nwe9.json?$limit=10&$where=created_date%3E'2012-11-09'AND created_date &gt; '2012-11-10'</span></code></pre></td></tr></table></div></figure>


<p>At this point, you should be able to get up and running pretty quick. If you have more questions feel free to ask.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy datetime comparison with ActiveRecord and Rails]]></title>
    <link href="http://newcodeflow.com/blog/2012/10/25/easy-datetime-comparison-with-activerecord-and-rails/"/>
    <updated>2012-10-25T21:26:00-04:00</updated>
    <id>http://newcodeflow.com/blog/2012/10/25/easy-datetime-comparison-with-activerecord-and-rails</id>
    <content type="html"><![CDATA[<p>TL;DR:
Instead of creating or hardcoding your own DateTime and Date objects, use built in ActiveSupport methods in your ActiveRecord queries.</p>

<p>Using ActiveRecord is great because of all the built in functionality, but combine ActiveRecord with all the headaches that come with dates and datetime and it can get pretty intimidating. In most web applications that you build you&#8217;ll probably find yourself needing to filter a set of ActiveRecord objects by date, whether it is a date_created field or something else. These are a few things that made this extremely easy for me to understand. I&#8217;m not going to cover formatting datetime display because that is another post for another day.</p>

<h2>Check the table</h2>

<p>First of all, you want to inspect your database table schema and determine what type of field you are comparing against. Your ActiveRecord model can have either &#8216;date&#8217; or &#8216;datetime&#8217; data types so you&#8217;ll want to make sure you use the corresponding &#8216;Date&#8217; or &#8216;DateTime&#8217; Ruby classes. You can actually compare &#8216;Date&#8217; and &#8216;DateTime&#8217; objects against one another:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">&gt;</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>However if you don&#8217;t realize that you are comparing two different types of data you may get unexpected results in your application.</p>

<h2>Use built in ActiveSupport methods</h2>

<p>&#8220;Active Support is a collection of various utility classes and standard library extensions that were found useful for Rails. All these additions have hence been collected in this bundle as way to gather all that sugar that makes Ruby sweeter.&#8221; -http://as.rubyonrails.org/</p>

<!-- For more on syntactic sugar check out this great blog post
link to Akiva -->


<p>This is the documentation for the ActiveSupport DateTime methods:
<a href="http://as.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html">http://as.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html</a></p>

<p>And this is the documentation for the ActiveSupport Date methods:
<a href="http://as.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html">http://as.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html</a></p>

<p>With ActiveSupport you can easily query your database with ActiveRecord like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">recent_images</span>
</span><span class='line'>    <span class="no">Image</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;created_at &gt; ?&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="o">.</span><span class="n">days</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">this_months_images</span>
</span><span class='line'>    <span class="no">Image</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;created_at &gt; ?&quot;</span><span class="p">,</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">beginning_of_month</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">expired?</span>
</span><span class='line'>    <span class="n">expiration_date</span> <span class="o">&gt;</span> <span class="n">created_at</span><span class="o">.</span><span class="n">advance</span><span class="p">(</span><span class="ss">:months</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">:days</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Antipatterns in Ruby]]></title>
    <link href="http://newcodeflow.com/blog/2012/10/16/common-antipatterns-in-ruby-and-rails/"/>
    <updated>2012-10-16T17:12:00-04:00</updated>
    <id>http://newcodeflow.com/blog/2012/10/16/common-antipatterns-in-ruby-and-rails</id>
    <content type="html"><![CDATA[<h2>What is an antipattern?</h2>

<p>An antipattern is generally a common solution to a problem that is ineffective, or has negative consequences. It can result from not knowing how to solve a particular problem, not caring how it&#8217;s solved, or using a correct pattern in a wrong context. Tom Crinson has a great presentation on antipatterns on speakerdeck that can be found <a href="https://speakerdeck.com/u/mrjaba/p/ruby-rails-antipatterns">here</a>. Here are a few examples of antipatterns that I found interesting:</p>

<h2>If True Else False</h2>

<p>If the block of code that is executed as a result of your conditional is simply a boolean value, forget about writing out the entire if/else statement. Just return the evaluated result of the conditional. So instead of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">horrible_if_else</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@jason_kidd</span><span class="o">.</span><span class="n">is_old?</span> <span class="o">&amp;&amp;</span> <span class="vi">@jason_kidd</span><span class="o">.</span><span class="n">is_drunk?</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can do this instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">better_if_else</span>
</span><span class='line'>  <span class="vi">@jason_kidd</span><span class="o">.</span><span class="n">is_old?</span> <span class="o">&amp;&amp;</span> <span class="vi">@jason_kidd</span><span class="o">.</span><span class="n">is_drunk?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Violating Demeter: Aka Train Wreck Code</h2>

<p>These rules make up Demeter&#8217;s Law:
+You can play on your own.
+You can play with your own toys (but you can&#8217;t take them apart)
+You can play with toys that were given to you.
+You can play with toys you&#8217;ve made yourself.</p>

<p>Other than sounding kind of creepy, the main side effect of this law is that you shouldn&#8217;t chain call methods that belong to a different class than you&#8217;re original object.</p>

<p>The following code violates this principle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">knicks</span><span class="o">.</span><span class="n">players</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">age</span><span class="o">.</span><span class="n">older_than?</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;wow they are old&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead, you should refactor the code so it looks more like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">knicks</span><span class="o">.</span><span class="n">ages_older_than?</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;wow they are old&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the first things I learned about Ruby is that it is an opinionated language. Therefore there are tons of antipatterns that exist in Ruby because there is a right way to do things, and there is a wrong way to do things. Leave a comment if you&#8217;ve run into any interesting antipatterns while coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conditionals and Null References in Ruby]]></title>
    <link href="http://newcodeflow.com/blog/2012/10/12/easy-conditionals-in-ruby/"/>
    <updated>2012-10-12T13:44:00-04:00</updated>
    <id>http://newcodeflow.com/blog/2012/10/12/easy-conditionals-in-ruby</id>
    <content type="html"><![CDATA[<p>One of the most common errors that haunt all programmers in almost all languages is the Null Reference Exception. Objects get initialized all the time from all kinds of different sources, and a lot of times those objects come back &#8220;null&#8221; or &#8220;nil&#8221; in Ruby. Because of this, programmers spend a lot of time protecting their code from breaking. It&#8217;s a common pattern to check if your object is &#8220;null&#8221; or &#8220;nil&#8221; before calling one of it&#8217;s methods. There&#8217;s a couple ways this can be done in Ruby that read a lot nicer than other languages, and take less plumbing code to accomplish.</p>

<h2>the classic &#8220;if&#8221; statement</h2>

<figure class='code'><figcaption><span>ruby version</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">name</span> <span class="k">if</span> <span class="n">obj</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>c# version</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">obj</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="n">obj</span><span class="p">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<h2>the ternary operator</h2>

<figure class='code'><figcaption><span>ruby version</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">obj</span> <span class="p">?</span> <span class="n">obj</span><span class="o">.</span><span class="n">name</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>c# version</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">string</span> <span class="n">a</span> <span class="p">=</span> <span class="n">obj</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">?</span> <span class="n">obj</span><span class="p">.</span><span class="n">name</span> <span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The ternary operator allows you to specify a default statement to execute in case your conditional evaluates to false. In Ruby, this line of code is 7+ characters shorter, which is why lazy programmers love Ruby.</p>

<h2>unless</h2>

<p>&#8220;unless&#8221; almost exactly like an &#8220;if&#8221; statement, but is often used instead of &#8220;if !&#8221; because it is more readable</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">obj</span> <span class="k">unless</span> <span class="n">my_array</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">obj</span> <span class="k">if</span> <span class="o">!</span><span class="n">my_array</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>tl;dr</h2>

<p>Get real familiar with the &#8220;if&#8221;, ternary, and &#8220;unless&#8221; operators and protect yourself from null references. What other ways do you use to protect your code?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Discussion with Chris Henry from Behance]]></title>
    <link href="http://newcodeflow.com/blog/2012/10/10/database-discussion-with-chris-henry-from-behance/"/>
    <updated>2012-10-10T22:06:00-04:00</updated>
    <id>http://newcodeflow.com/blog/2012/10/10/database-discussion-with-chris-henry-from-behance</id>
    <content type="html"><![CDATA[<p>Chris Henry, the CTO of <a href="http://behance.net">Behance</a> came in to the Flatiron School today to give us a primer on databases and MySQL. He showed us a few cool things that I didn&#8217;t know about before, and also gave us some insight on how a real-world application with many users is architected and scaled. There was lots of advanced shit but here are some things I took away:</p>

<h2>Slow Log</h2>

<p>MySQL writes to a &#8220;slow log&#8221; any queries that take longer than a given threshold (Behance uses 1 sec) to execute. This is great tool to use to debug the reason why it takes your page 20 seconds to load and no one is using your site. Use &#8220;EXPLAIN EXTENDED&#8221; to get into the guts of what a query is actually doing.</p>

<h2>Index Everything</h2>

<p>Don&#8217;t index everything, but apparently adding indexes will solve 99% of the problems that you run into.</p>

<h2>Denormalization</h2>

<p>Whenever I read documentation on denormalization, I think to myself: &#8220;Ok, I get the concept, but when will I ever need to do this?&#8221;. Behance does something really interesting. For aggregate data that requires multiple joins or are really inefficient, they denormalize that data and store it with their &#8220;main&#8221; objects. To support that, they have additional database clusters that store the actual data that is being aggregated. If I understood that correctly, it means they store &#8220;Tag&#8221; rows elsewhere (MongoDB?) but denormalize &#8220;Tag&#8221; counts and add them to one of their main models.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String concatenation the right way; the fast and furious way]]></title>
    <link href="http://newcodeflow.com/blog/2012/10/09/string-concatenation-the-right-way-the-fastest-way/"/>
    <updated>2012-10-09T23:15:00-04:00</updated>
    <id>http://newcodeflow.com/blog/2012/10/09/string-concatenation-the-right-way-the-fastest-way</id>
    <content type="html"><![CDATA[<p>One of the greatest parts of programming is learning something that blows your mind, a moment where <a href="http://youtu.be/ZKh68YfQYkE?t=5s">this</a> happens. It&#8217;s one of those moments that you realize you are a programming n00b, and that there is always a better way to do things. I had one of these moments recently when I was going through the <a href="http://rubykoans.com">Ruby Koans</a>. In one of the introductory tests that cover strings you are told to think about string concatenation, and in particular which method is faster when building strings: &#8220;+&#8221; or &#8221;<<". 
</p>
<p>The great part about leading questions like that is that you pretty much already know what the answer is going to be. So I went ahead and proved it, just so I could write this blog post. Awesome. There&#8217;s a really handy Benchmark class in Ruby that lets you time to execution of blocks of code, so I used that to scientifically prove what we all now know is true: &#8221;<<" is faster than "+".<p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;benchmark&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;a &lt;&lt; b&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">second_a</span> <span class="o">=</span> <span class="s2">&quot;a&quot;</span>
</span><span class='line'>      <span class="mi">100000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">second_a</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;b&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;a + b&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">first_a</span> <span class="o">=</span> <span class="s2">&quot;a&quot;</span>
</span><span class='line'>      <span class="mi">100000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">first_a</span> <span class="o">+</span> <span class="s2">&quot;b&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\#</span><span class="s2">{ab}&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">third_a</span> <span class="o">=</span> <span class="s2">&quot;a&quot;</span>
</span><span class='line'>      <span class="n">third_b</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span>
</span><span class='line'>      <span class="mi">100000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>          <span class="s2">&quot;</span><span class="si">#{</span><span class="n">third_a</span><span class="si">}#{</span><span class="n">third_b</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
Here are the results:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>         <span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'><span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">b</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">040000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">040000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mo">036503</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span> <span class="o">+</span> <span class="n">b</span>    <span class="mi">0</span><span class="o">.</span><span class="mo">040000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">040000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mo">042027</span><span class="p">)</span>
</span><span class='line'><span class="c1">#{ab}    0.040000   0.000000   0.040000 (  0.040516)</span>
</span></code></pre></td></tr></table></div></figure>
<p>As you can see, the &#8221;<<" operator is a whole lot faster. It's faster because "<<" alters the original string, whereas "+" has to create a new string, and creation is a more costly operation. This is something that seems really small and insignificant, but performance matters. Like Vin Diesel said, "It doesn't matter if you win by an inch or a mile. Winning's winning. Unless you're not using '<<' to build Ruby strings. Then you are losing."</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://newcodeflow.com/blog/2012/10/03/hello-world-slash/"/>
    <updated>2012-10-03T15:16:00-04:00</updated>
    <id>http://newcodeflow.com/blog/2012/10/03/hello-world-slash</id>
    <content type="html"><![CDATA[<p>Deploying Octopress for the first time turned out to be fairly easy. I took a slightly different approach than the standard installation documentation, I wanted to store the codebase in my Github repository as well as deploy to Heroku. To do this some slight customization is needed:</p>

<ol><li>Edit .git/config and rename the current &#8216;origin&#8217; remote to something else (upstream).</li><li>Add a remote for your github repository <code>git remote add origin git@github.com:stephenchen13/octopress.git</code></li><li>Add a remote for your heroku repository <code>git remote add heroku git@heroku.com:frozen-citadel-3574.git</code></li><li>Regenerate everything necessary, and now you can push to both Github and Heroku</li></ol>


<p>Blog away!</p>
]]></content>
  </entry>
  
</feed>
